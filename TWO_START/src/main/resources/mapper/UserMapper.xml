<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

        <!--namespace起sql隔离作用 -->
        <!--规范1. namespace等于mapper接口地址-->
<mapper namespace="My.mapper.UserMapper">

    <!--开启本mapper的namespace="My.mapper.UserMapper"下的二级缓存 (不是本namespace下statement的不会开启)-->
    <!--type:指定cache接口的实现类的类型 mybatis默认使用PerpetualCache
        若要和chcache这个分布式框架整合 则实现type为chcache接口的类型 当然 别忘了导入jar包-->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"> </cache>

    <select id="findUserById" parameterType="int" resultType="My.po.User">
        SELECT * FROM `user` WHERE id=#{id}
    </select>

    <select id="findUserByName" parameterType="java.lang.String" resultType="My.po.User">
        SELECT * FROM `user` WHERE username LIKE '%${value}%'
    </select>

    <insert id="insertUser" parameterType="My.po.User">
        <!--自增配置-->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO `user`(username,birthday,sex,address) VALUES(#{username},#{birthday},#{sex},#{address})
    </insert>

    <delete id="deleteUser" parameterType="int">
        DELETE FROM `user` WHERE id=#{id}
    </delete>

    <update id="updateUser" parameterType="My.po.User">
        UPDATE `user` SET username=#{username},sex=#{sex},birthday=#{birthday},address=#{address} WHERE id=#{id}
    </update>

    <!--使用pojo包装类型 进行综合查询 sql拼接技术改装

        原版：SELECT * FROM `user` WHERE `user`.sex =#{userCustomer.sex} and `user`.username LIKE "%${userCustomer.username}%"

    -->
    <select id="findUserList" parameterType="My.po.UserQureyVo" resultType="My.po.UserCustomer">
        SELECT * FROM `user`
        <where>
            <!--<if test="userCustomer!=null">-->
                <!--<if test="userCustomer.sex!=null and userCustomer.sex!=''">-->
                    <!--and user.sex = #{userCustomer.sex}-->
                <!--</if>-->
                <!--<if test="userCustomer.username!=null and userCustomer.username!=''">-->
                    <!--and user.username like '%${userCustomer.username}%'-->
                <!--</if>-->
            <!--</if>-->

             <!--为了sql可多次复用拼接 注释掉第一种sql拼接用法 跳出where标签
             使用下方sql片段 如果refid指定的id不再本mapper文件中 组要前边加namespace指出-->
            <include refid="query_user_where"></include>
        </where>
    </select>


    <!--去掉where  id:sql片段的唯一标识-->
    <sql id="query_user_where">

            <if test="userCustomer!=null">
                <if test="userCustomer.sex!=null and userCustomer.sex!=''">
                    and user.sex = #{userCustomer.sex}
                </if>
                <if test="userCustomer.username!=null and userCustomer.username!=''">
                    and user.username like '%${userCustomer.username}%'
                </if>
            </if>

    </sql>
</mapper>